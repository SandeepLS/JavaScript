What is render?
In React, rendering means taking the JSX code which we write (or React elements) and updating the DOM,
to display it, on the screen.
React handles rendering in an efficient way, using its Virtual DOM to minimize, updates to the real DOM.

Key Points About Rendering:-
1. Initial Render:
   When a React component is first loaded, React renders it for the first time and adds its output to the DOM.
2. Re-render:
   When A component re-renders, the:
   > Its state changes.
   > Its props change.
   > Its parent component re-renders.
3. Rendering Lifecycle:
   > For class components, rendering happens in the render() method.
   > For functional components, rendering happens when the component function is called.

Example of Rendering
1. Functional Component:-
  import React, { useState } from "react";
  
  function Counter() {
    const [count, setCount] = useState(0); // State to track count
  
    return (
      <div>
        <p>Count: {count}</p>
        <button onClick={() => setCount(count + 1)}>Increment</button>
      </div>
    );
  }
  
  export default Counter;

  Explaination:
  1. Initial Render:  React renders the Counter component and displays:
     Count: 0
     [Increment Button]
  2. Re-render:
     When the "Increment" button is clicked, setCount updates the state, and React re-renders the component to display:  
     Count: 1
     [Increment Button]

2. render() in Class Components
   For class components, the render() method is where the JSX is returned.
    import React, { Component } from "react";
    
    class Hello extends Component {
      render() {
        return <h1>Hello, {this.props.name}!</h1>;
      }
    }
    export default Hello;

  When Hello is rendered with <Hello name="World" />, the output will be: Hello, World!
-------------------------------------------------------------------------------------------
Render:-
In React, rendering refers to the process of React creating a Virtual DOM,
representation of the UI based on the component's state and props, and -
then updating the real DOM as needed to reflect changes.

Key Points About render:
1. React Components Render UI:
  > Functional components return JSX to define what should be rendered on the screen.
  > In class components, the render() method is used to return JSX.

2. Re-rendering:
  > React re-renders a component whenever its state or props change.
  > Re-rendering updates the Virtual DOM, and React efficiently applies changes,-
    to the real DOM (diffing algorithm).

3. Pure Functionality:
  > The render() process should be pure, meaning it doesnâ€™t modify state or trigger side effects.
    It simply returns JSX.

Functional Component Example:-
  function Greeting({ name }) {
    return <h1>Hello, {name}!</h1>; // JSX to render
  }
  export default Greeting;

Class Component Example:-
  import React, { Component } from "react";
  
  class Greeting extends Component {
    render() {
      return <h1>Hello, {this.props.name}!</h1>; // JSX to render
    }
  }
  export default Greeting;

--------------------------------------------------------------------------------------------------
How Rendering Works:
1. Initial Render:
   The first time a component is mounted, React renders it based on its initial state and props.

2. Updates and Re-renders:
   React re-renders the component if:
   > Props change (passed from a parent component).
   > State changes (managed within the component).

Example of Re-rendering:
  import React, { useState } from "react";
  
  function Counter() {
    const [count, setCount] = useState(0);
  
    return (
      <div>
        <p>Count: {count}</p>
        <button onClick={() => setCount(count + 1)}>Increment</button>
      </div>
    );
  }
  
  export default Counter;

> Initial Render: The count starts at 0.
> Re-render: Clicking the button changes the count state, 
  causing the component to re-render with the updated value.
