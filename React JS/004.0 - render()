render():-
The render() method, is used to define what a component should display on the screen. 
It returns a React element, that represents the UI structure of the component. 
Render responsible, How the UI looks & Fell to the user.

In class components, render() is a required method, while functional components simply return JSX.

Example:-
import React, { Component } from "react";

class Welcome extends Component {
  render() {
    return (
      <div>
        <h1>Hello, {this.props.name}!</h1>
        <p>Welcome to React.</p>
      </div>
    );
  }
}
export default Welcome;

index.js:-
import React from "react";
import ReactDOM from "react-dom";
import Welcome from "./Welcome";

ReactDOM.render(<Welcome name="John" />, document.getElementById("root"));

Explanation:
1. What it Does:
   > The render() method returns JSX, which describes the component's UI.
2. How it Works:
   > If name="John" is passed as a prop to the Welcome component, it will render:
    Hello, John!
    Welcome to React.
3. When it Runs:
   The render() method is invoked whenever the component needs to update or display the UI, 
   such as after a state or prop change.

-------------------------------------------------------------------------------------------
Render:-
In React, rendering refers to the process of React creating a Virtual DOM,
representation of the UI based on the component's state and props, and -
then updating the real DOM as needed to reflect changes.

Key Points About render:
1. React Components Render UI:
  > Functional components return JSX to define what should be rendered on the screen.
  > In class components, the render() method is used to return JSX.

2. Re-rendering:
  > React re-renders a component whenever its state or props change.
  > Re-rendering updates the Virtual DOM, and React efficiently applies changes,-
    to the real DOM (diffing algorithm).

3. Pure Functionality:
  > The render() process should be pure, meaning it doesnâ€™t modify state or trigger side effects.
    It simply returns JSX.

Functional Component Example:-
  function Greeting({ name }) {
    return <h1>Hello, {name}!</h1>; // JSX to render
  }
  export default Greeting;

Class Component Example:-
  import React, { Component } from "react";
  
  class Greeting extends Component {
    render() {
      return <h1>Hello, {this.props.name}!</h1>; // JSX to render
    }
  }
  export default Greeting;

--------------------------------------------------------------------------------------------------
How Rendering Works:
1. Initial Render:
   The first time a component is mounted, React renders it based on its initial state and props.

2. Updates and Re-renders:
   React re-renders the component if:
   > Props change (passed from a parent component).
   > State changes (managed within the component).

Example of Re-rendering:
  import React, { useState } from "react";
  
  function Counter() {
    const [count, setCount] = useState(0);
  
    return (
      <div>
        <p>Count: {count}</p>
        <button onClick={() => setCount(count + 1)}>Increment</button>
      </div>
    );
  }
  
  export default Counter;

> Initial Render: The count starts at 0.
> Re-render: Clicking the button changes the count state, 
  causing the component to re-render with the updated value.
