/*
Def:-
Hooks are special functions, that let you use state and other React features in functional components, without writing a class.
Hooks allow developers to manage component state, lifecycle events, and side effects more cleanly and concisely.

some commonly used React Hooks are:-
useState(), useEffect(), useContext(), useRef(), useMemo(), useCallback()

Ex:-
import React, { useState, useEffect } from "react";

function Counter() {
  // Declare a state variable 'count' with an initial value of 0
  const [count, setCount] = useState(0);

  // useEffect hook to update the document title whenever 'count' changes
  useEffect(() => {
    document.title = `You clicked ${count} times`;
  }, [count]); // Only re-run the effect if 'count' changes

  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>
        Click me
      </button>
    </div>
  );
}
export default Counter;
*/

/*
Hooks:- 
  allow function components, to have access to state and other React features.
  Because of this, class components are generally no longer needed.
  Although Hooks generally replace class components, there are no plans to remove classes from React.

There are 3 rules for hooks:
  Hooks can only be called inside React function components.
  Hooks can only be called at the top level of a component.
  Hooks cannot be conditional

Note: Hooks will not work in React class components.
*/
Hooks allow us to "hook" into React features such as state and lifecycle methods.
Ex:
import React, { useState } from "react";
import ReactDOM from "react-dom/client";

function FavoriteColor() {
  const [color, setColor] = useState("red");
    
  return (
    <>
      <h1>My favorite color is {color}!</h1>
      <button
        type="button"
        onClick={() => setColor("blue")}
      >Blue</button>
      <button
        type="button"
        onClick={() => setColor("red")}
      >Red</button>
      <button
        type="button"
        onClick={() => setColor("pink")}
      >Pink</button>
      <button
        type="button"
        onClick={() => setColor("green")}
      >Green</button>
    </>
  );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<FavoriteColor />);

/*
You must import Hooks from react.
Here we are using the useState Hook to keep track of the application state.
State generally refers to application data or properties that need to be tracked.
*/
