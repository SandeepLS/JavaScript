/*
prop drilling:-
State should be held by the highest parent component in the stack, that requires access to the state.
To illustrate, we have many nested components. The component at the top and bottom of the stack need access to the state.
To do this without Context, we will need to pass the state as "props" through each & every nested component. This is called "prop drilling".
*/
step-1:-
  Create Context
  To create context, you must Import createContext and initialize it:
    import { useState, createContext } from "react";
    import ReactDOM from "react-dom/client";
    const UserContext = createContext()

step-2:-
  Next we'll use the Context Provider to wrap the tree of components that need the state Context.
  Context Provider: Wrap child components in the Context Provider and supply the state value.
    function Component1() {
      const [user, setUser] = useState("Jesse Hall");
    
      return (
        <UserContext.Provider value={user}>
          <h1>{`Hello ${user}!`}</h1>
          <Component2 user={user} />
        </UserContext.Provider>
      );
    }

step-3:-
  Now, all components in this tree will have access to the user Context.
  Use the useContext Hook
  In order to use the Context in a child component, we need to access it using the useContext Hook.
  First, include the useContext in the import statement:
    import { useState, createContext, useContext } from "react";

step-4:-
  Then you can access the user Context in all components:
  function Component5() {
    const user = useContext(UserContext);
  
    return (
      <>
        <h1>Component 5</h1>
        <h2>{`Hello ${user} again!`}</h2>
      </>
    );
  }
---------------------------------------
//Full Ex:-
import { useState, createContext, useContext } from "react";
import ReactDOM from "react-dom/client";

const UserContext = createContext();

function Component1() {
  const [user, setUser] = useState("Jesse Hall");

  return (
    <UserContext.Provider value={user}>
      <h1>{`Hello ${user}!`}</h1>
      <Component2 />
    </UserContext.Provider>
  );
}

function Component2() {
  return (
    <>
      <h1>Component 2</h1>
      <Component3 />
    </>
  );
}

function Component3() {
  return (
    <>
      <h1>Component 3</h1>
      <Component4 />
    </>
  );
}

function Component4() {
  return (
    <>
      <h1>Component 4</h1>
      <Component5 />
    </>
  );
}

function Component5() {
  const user = useContext(UserContext);

  return (
    <>
      <h1>Component 5</h1>
      <h2>{`Hello ${user} again!`}</h2>
    </>
  );
}

//Even though components 2-4 did not need the state, they had to pass the state along so that it could reach component 5.
