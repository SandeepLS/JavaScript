Def:-
useState, that allows you to add state to functional components.
It is used to declare and manage local state variables in a functional component. 
When the state changes, the component re-renders to reflect the updated state.

Syntax:
const [state, setState] = useState(initialState);
> state: The current value of the state.
> setState: A function used to update the state.
> initialState: The initial value of the state (can be a primitive value, object, or array).

Example 1:-
import React, { useState } from 'react';
function Counter() {
  // initializes a state variable 'count' with an initial value of 0.
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>You clicked {count} times</p>
      {/* Update the state using the setCount function */}
      <button onClick={() => setCount(count + 1)}>Click me</button>
    </div>
  );
}
export default Counter;

Why to Use useState:-
> useState provides a cleaner and more concise way to manage state, compared to class components (which require this.state and this.setState).

When to Use useState:-
> Use useState when you need to manage state, that is specific to a single component (e.g., form inputs, toggles, counters).
> For simple or moderately complex state management, useState is ideal. For more complex state logic, consider using useReducer.

Example with Multiple State Variables:-
import React, { useState } from 'react';
function Form() {
  const [name, setName] = useState('');
  const [age, setAge] = useState(0);

  return (
    <div>
      <input
        type="text"
        value={name}
        onChange={(e) => setName(e.target.value)}
        placeholder="Enter your name"
      />
      <input
        type="number"
        value={age}
        onChange={(e) => setAge(Number(e.target.value))}
        placeholder="Enter your age"
      />
      <p>Name: {name}, Age: {age}</p>
    </div>
  );
}
export default Form;

---------------------------------------------------------------
Example-1: Use the state variable in the rendered component.
  import { useState } from "react";
  import ReactDOM from "react-dom/client";
  
  function FavoriteColor() {
    const [color, setColor] = useState("red");
  
    return <h1>My favorite color is {color}!</h1>
  }

Example-2: Use a button to update the state:
  import { useState } from "react";
  import ReactDOM from "react-dom/client";
  
  function FavoriteColor() {
    const [color, setColor] = useState("red");
  
    return (
      <>
        <h1>My favorite color is {color}!</h1>
        <button
          type="button"
          onClick={() => setColor("blue")}
        >Blue</button>
      </>
    )
  }

Example-3: Create multiple state Hooks:
  import { useState } from "react";
  import ReactDOM from "react-dom/client";
  
  function Car() {
    const [brand, setBrand] = useState("Ford");
    const [model, setModel] = useState("Mustang");
    const [year, setYear] = useState("1964");
    const [color, setColor] = useState("red");
  
    return (
      <>
        <h1>My {brand}</h1>
        <p>
          It is a {color} {model} from {year}.
        </p>
      </>
    )
  }

Example-4: Create a single Hook that holds an object:
import { useState } from "react";
import ReactDOM from "react-dom/client";

function Car() {
  const [car, setCar] = useState({
    brand: "Ford",
    model: "Mustang",
    year: "1964",
    color: "red"
  });

  return (
    <>
      <h1>My {car.brand}</h1>
      <p>
        It is a {car.color} {car.model} from {car.year}.
      </p>
    </>
  )
}


Updating Objects and Arrays in State
  When state is updated, the entire state gets overwritten.
  What if we only want to update the color of our car?
  If we only called setCar({color: "blue"}), this would remove the brand, model, and year from our state.
  We can use the JavaScript spread operator to help us.

Example-5: Use the JavaScript spread operator to update only the color of the car:
  import { useState } from "react";
  import ReactDOM from "react-dom/client";
  
  function Car() {
    const [car, setCar] = useState({
      brand: "Ford",
      model: "Mustang",
      year: "1964",
      color: "red"
    });
  
    const updateColor = () => {
      setCar(previousState => {
        return { ...previousState, color: "blue" }
      });
    }
  
    return (
      <>
        <h1>My {car.brand}</h1>
        <p>
          It is a {car.color} {car.model} from {car.year}.
        </p>
        <button
          type="button"
          onClick={updateColor}
        >Blue</button>
      </>
    )
  }
-------------------------------------------------------------------
Example: Using useState to Manage a Counter:-

import React, { useState } from "react";
function Counter() {
  // Declare a state variable 'count' with an initial value of 0
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>Current count: {count}</p>
      {/* Button to increment the count */}
      <button onClick={() => setCount(count + 1)}>Increase Count</button>
      {/* Button to decrement the count */}
      <button onClick={() => setCount(count - 1)}>Decrease Count</button>
    </div>
  );
}

export default Counter;
