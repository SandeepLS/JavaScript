State Management:-
State management refers to the process of, managing the state of an application. 
In React (or any frontend framework), "state" is the data that determines,-
how the application behaves and renders at any given time.

State management is the backbone of dynamic applications, ensuring data and UI.
Depending on the complexity of our app, we can rely on React's built-in tools or external libraries,-
to handle state efficiently.

Key Concepts of State Management
1. State:
   The data or variables, that define the current condition of a component or application.
   Example: User inputs, selected items in a shopping cart, or API response data.

2. State Updates:
   It Changes to the state, that cause the UI to re-render with the new data.
   Example: Clicking a button to increment a counter.

3. Unidirectional Data Flow:
   In React, state flows from parent components to child components via props, ensuring predictable updates.

4. Global vs. Local State:
   Local State: State specific to a single component.
   > Example: A toggle button's "on" or "off" status.
   Global State: State shared across multiple components.
   > Example: User authentication status or theme settings.

Why is State Management Important?
> Consistency: Ensures the UI reflects the current state of the data.
> Scalability: Makes it easier to manage data flow in large applications.
> Maintainability: Simplifies debugging and testing by organizing state effectively.
> User Experience: Provides responsive and interactive applications.

Tools and Techniques for State Management in React:-
  1. Built-in React Tools:
     > useState: For managing local state.
     > useReducer: For more complex local state or logic.
     > Context API: For sharing global state across components.
  2. External Libraries (for more complex applications):
     > Redux: Centralized state management with actions and reducers.
     > Zustand: Minimalistic global state management.
     > Recoil: Fine-grained state management for React.
     > React Query: Handles server state and caching.
