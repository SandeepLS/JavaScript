Pure component:-
-> In other way to create class component, is by extending pure component.
-> React.Component is the base class for React Component,-
-> React.PureComponent is a variation of React.Component,-
   that implements a shallow comparison for props and state, to determine if the component should re-render.
-> If neither the state nor the props have changed (based on shallow comparison), 
   the component will skip the re-rendering process, thereby improving performance.
-> When to use PureComponent: Use it when:
   a. Your component renders the same output, for the same props and state.
   b. You want to avoid unnecessary re-renders, for performance optimization.

Example 1:-
Example of React.PureComponent:- Using React.Component

regComponent.jsx:-
  import React, { Component } from "react";
  class RegularComponent extends Component {
    render() {
      console.log("RegularComponent re-rendered");
      return <div>Regular Component: {this.props.name}</div>;
    }
  }
  export default RegularComponent;

pureComponent.jsx:- Using React.PureComponent
  import React, { PureComponent } from "react";
  class PureComp extends PureComponent {
    render() {
      console.log("PureComponent re-rendered");
      return <div>Pure Component: {this.props.name}</div>;
    }
  }
  export default PureComp;

Using above both example:-
  import React, { useState } from "react";
  import RegularComponent from "./RegularComponent";
  import PureComp from "./PureComp";
  
  function App() {
    const [name, setName] = useState("React");
    const [count, setCount] = useState(0);
  
    const updateName = () => {
      setName("React"); // This doesn't trigger a re-render in PureComponent.
    };
  
    return (
      <div>
        <button onClick={updateName}>Update Name</button>
        <button onClick={() => setCount(count + 1)}>Increment Count</button>
        <RegularComponent name={name} />
        <PureComp name={name} />
      </div>
    );
  }
 
  export default App;


--------------------------------------------------------------------------------
Example 2:-
Ex:-Components(Folder):-
(i)PureComp.js:-rpce
  import React, { PureComponent } from 'react'
  class PureComp extends PureComponent {
    render() {
      return (
        <div>I'm PureComp {this.props.name}</div>
      )
    }
  }
  export default PureComp

(ii)RegComp.js:-rce
import React, { Component } from 'react'
class RegComp extends Component {
  render() {
    return (
      <div>I'm RegComp {this.props.name}</div>
    )
  }
}
export default RegComp

(iii)ParentComp.js:-rce, To change the state of the component, we will make use of a constructor.(rconst)
                    Create DidMount life cycle method, to setTimeInterval.
                    In that we will use Arrow Fun, to set a setState Fun().
                    Then import PureComp,js & RegComp.js into ParentComp.js, then pass name as a properties.
import React, { Component } from 'react'
import PureComp from './PureComp';
import RegComp from './RegComp';

class ParentComp extends Component {
    constructor(props) {
      super(props)
    
      this.state = {
         name:"mashiii"
      }
    }

    componentDidMount(){
        setInterval(()=>{
            this.setState({
                name: "Mashiii"
            });
        }, 300);
    }
  render() {
    return (
      <div>I'm ParentComp
        <PureComp name={this.state.name}/>
        <RegComp name={this.state.name}/>
        
      </div>      
    )
  }
}
export default ParentComp

Note:- to check the PureComp is actually rerendering or not.
        it's include simple console.log() statement.(clg)
        In render() method, {console.log(Pure component render)}
        In render() method, {console.log(Parent component render)}
        In render() method, {console.log(Regulare component render)}

(iv)App.js:-import the ParentComp.js to App.js.

:-PureComp optimize react code & also improves performance.
