React:- Component, State & Props
(A)Components:- are the building blocks of any React Application,-
  And single app usually consist of multiple components.
  A component is essentially a pice of the user Interface, It is like a function that returns HTML elements.
  Reusability: components can be reused, multiple time accross the application,
  this reduces the development time.
  Ex:-
  class Simple extends React.Component {   //A component is implementing as a JS class, having some state & render method.
  state = {};    //state is a data, which you want component to render.
  render(){      //render responsible, How the UI looks & Fell to the user.
      return(
          <div>
            <h1>Hello world</h1>
          </div>
      );
  }
}
-----------------------------------------------------------------------------------------------
(B)State:- of a component,is an object, that holds some data. 
           This data influence the output of the component.
           Everytime the state of an object changes, The component is rerender on to the screen.
  Example:
  import React, { useState } from 'react'
  function stateCounter() {
      const [count, setCount] = useState(0);
    return (
      <div>
          <h1>Counter: {count} </h1>
          <button onClick={() => setCount(count+1)}>Increase Count</button>
          <button onClick={() => setCount(count-1)}>Decrease Count</button>
          <button onClick={() => setCount(0)}>Reset</button>
      </div>
    )
  }
  export default stateCounter;

  useState Hook:
  > Initializes the state variable count to 0.
  > Provides setCount to update the value of count.
  > When setCount is called, React updates the value of count and re-renders the component to display the new value.

-----------------------------------------------------------------------------------------------
(C)Props:-props is short for Properties,
          That allows us to, pass argument or data, to components.
          The Props are, a way of passing data from a parent component to a child component.-
          They are read-only, It means the child component cannot modify them directly.
  Example: 
  // Parent Component(App.js)
  import React from 'react';
  import Greeting from './Greeting';
  
  function App() {
    return (
      <div>
        <Greeting name="John" />
        <Greeting name="Jane" />
      </div>
    );
  }
  export default App;
  
  // Child Component (Greeting.js)
  import React from 'react';
  
  function Greeting(props) {
    return <h1>Hello, {props.name}!</h1>;
  }
  export default Greeting;

  O/P:
  Hello, John!
  Hello, Jane!

  Explanation:
  1. Parent Component (App):
     Passes the name prop with values "John" and "Jane" to the Greeting component.
  2. Child Component (Greeting):
     Receives the name prop and uses it to display a dynamic greeting.
  3. Props Usage:
     props.name accesses the name value passed from the parent.
