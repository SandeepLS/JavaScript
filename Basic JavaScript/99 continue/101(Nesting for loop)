/*
If you have a multi-dimensional array, you can use the same logic as the prior waypoint to loop through both the array and any sub-arrays. Here is an example:

const arr = [
  [1, 2], [3, 4], [5, 6]
];

for (let i = 0; i < arr.length; i++) {
  for (let j = 0; j < arr[i].length; j++) {
    console.log(arr[i][j]);
  }
}
*/

Ex:-Modify function multiplyAll so that it returns the product of all the numbers in the sub-arrays of arr.
function multiplyAll(arr) {
  let product = 1;

   for(var i=0;i<arr.length;i++){       //iterates over the outer array.
     for(var j=0;j<arr[i].length;j++){  //iterates over the inner array.
       product *= arr[i][j];
       //console.log( product *= arr[i][j];);
     }
   }
  
  return product;
}
multiplyAll([[1, 2], [3, 4], [5, 6, 7]]);
O/P:-5040
-------------------------------------OR----------------------------------------------
function multiplyAll(arr) {
  let product = 1;

   for(var i=0;i<arr.length;i++){       //iterates over the outer array.
     for(var j=0;j<arr[i].length;j++){  //iterates over the inner array.
       product *= arr[i][j];
       //console.log( product *= arr[i][j];);
     }
   }
  
  return product;
}
var product = multiplyAll([[1, 2], [3, 4], [5, 6, 7]]);
console.log(product);
O/P:-5040
---------------------------------------OR-----------------------------------------------
const arr = [ [1, 2], [3, 4], [5, 6, 7] ];
  let product =1;
  for (let i = 0; i < arr.length; i++) {
    for (let j = 0; j < arr[i].length; j++) {
     product *= arr[i][j];
    }
  }
  console.log(product);

/*
j < arr[i].length;: This is the loop condition. 
It checks whether the current value of j is less than the length of the inner array at index i in the outer array arr[i]. 
The goal is to iterate over all the elements of the inner array.
*/

/*
Test:-
Passed:multiplyAll([[1], [2], [3]]) should return 6
Passed:multiplyAll([[1, 2], [3, 4], [5, 6, 7]]) should return 5040
Passed:multiplyAll([[5, 1], [0.2, 4, 0.5], [3, 9]]) should return 54
*/
