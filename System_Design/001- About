Module 10:- Class-1

1) System Design:-
System design is the process of desining the architecture, components, modules, & interface/interactions,
of a software system to meet, user specific requirements.
  a) Defining the architecture: This includes the software and hardware architecture.
  b) Interface: Basically interface is anything, to which the user interact.
      Ex:If we want to switch on the TV, our remote is interface.
      System is target of, building a system is to meet user need.
  c) Using modeling languages: Designers use modeling languages to express the information,
     Some examples of modeling languages include Unified Modeling Language (UML), Flowchart,
     Business Process Modeling Notation (BPMN), and Systems Modelling Language (SysML).

2)Why is SD important:-
    System design is a crucial phase, it ensures the developed system meets the specific requirements and,
    expectations of the end-users, while maintaining efficiency, scalability, and reliability, -
    Reduces Development Time and Costs, Ensures Security and Compliance.
    
    In Project production 70% of the times, will go to System Design.

3)High Level Design:- 22:00
    It is a overview/Quick summary, Like what we are going to implement.
    without going into the details.
    Ex: When we have, lot of component like userInterface(System design), load balance, server, database, cash, api getway.
    
    Low Level Design:-
    These servers are, were process our request, They will be multiple files like code, classes, functions etc.
    Details of the software, which is running. OR Implementation code.
    Ex: When we zoom in on to the server, we will get, Which software are running, what is the code, which version using, etc.

High-Level Design (HLD): Focuses on the overall architecture, including databases, APIs, servers, and client-side technologies.
Low-Level Design (LLD): Focuses on specific modules, data structures, algorithms, and system interactions.

4)Modularity/ Modular system/Approach:- 25:00
    Modularity is basically breaking down, larger task into smaller smaller pices independently,-
    So that we can process, all of them in parallel, which will endup, helping us creating a bigger task.

    Breaking our code into smaller chunks.
    
    Ex: If i want to build a care, How do we start with that,
    ->We start creating a weels of that,
    ->We start creating a seets of that, doors of that & etc,
    Then finally, we assemble all of this together, we build a car.


5)Interface in coding level:-
    Logical function, It takes some input & give some output.
    A method which user can interact.
    We don't worry about internal process.
    
    Ex: if i have one function, which will be addition.
    function add(a, b){  //Interface
        let  res = a+b;  
        console.log(res);
    }
    add(1, 2);  //If i call this function, i will get some O/P.
