1/ = (Assignment Operator):
  It assigns the value, to the variable on the left.
  Ex: let x = 10;  // Assigns the value 10 to the variable x.
  Ex: let y = "Hello"; // Assigns the string "Hello" to y

2/ == (Loose Equality Comparison):
  It compares two values for equality,after converting both values to a common type (type coercion).
  It only checks for value equality, ignoring the data type.
  Ex: 5 == '5';   // true, because '5' is coerced to the number 5 before comparison.
  Ex: null == undefined;  // true, because null and undefined are considered equivalent.
  console.log(5 == "5"); // true - Type coercion happens, string "5" is converted to number 5
  console.log(0 == false); // true - false is coerced to 0
  console.log(null == undefined); // true - Special case where null and undefined are considered equal

  Examples:
  let a = 5;
  if (a == "5") { // Evaluates to true because of type coercion
    console.log("Values are equal");
  }

3/ === (Strict Equality Comparison):
  This is the strict equality operator. It compares two values for equality without type conversion.
  It checks both the value and the data type.
  Ex: 5 === '5';  // false, Different data types, because 5 is a number and '5' is a string
      console.log(0 === false); // false - Different data types (number vs. boolean)
      console.log(null === undefined); // false - null and undefined are different types
      console.log(5 === 5); // true - Both value and type are the same

      Examples:
      let b = 5;
      if (b === "5") { // Evaluates to false because the types are different
        console.log("Values are equal");
      } else {
        console.log("Values are not equal"); // This will execute
      }

---------------------------------------------------
Summary:
  =  : It assigns the value.
  == : is used to compare two values for equality, with type conversion. 
       It checks only the values, but does not check their data types.
  ===: is used to compares two values for equality without type conversion.
       It checks both the value and the data type.

  
  

