//Closure:-
/*
What is the primary benefit of using closures in JavaScript?
Closures enable function factories with private variables for encapsulation and data hiding.

Ex:
  function createCounter() {
      let count = 0; // Private variable
  
      return {
          increment: function() {
              count++;
              return count;
          },
          decrement: function() {
              count--;
              return count;
          },
          getCount: function() {
              return count;
          }
      };
  }
  
  const counter = createCounter();
  
  console.log(counter.increment()); // Output: 1
  console.log(counter.increment()); // Output: 2
  console.log(counter.decrement()); // Output: 1
  console.log(counter.getCount());  // Output: 1
  
  // Attempting to access the count variable directly will fail
  console.log(counter.count); // Output: undefined
*/
-----------------------------------------------------------------------------------------------
/*
function outerFunction() {
  var secret = 'hidden';
  function innerFunction() {
    return secret;
  }
  return innerFunction;
}
var closureFunction = outerFunction();
console.log(closureFunction());  //hidden

//When outerFunction() is called, it returns innerFunction.
*/
-------------------------------------------------------------------------------------------------
/*
Closures in JavaScript are a powerful concept that allows you to create a private state for a function,
enabling you to hide variables from the global scope while still making them accessible to specific functions.
This is particularly useful for scenarios such as maintaining a counter's state.

Closures are used to create a private state for a function,
where variables can be hidden from the global scope but accessible to specific functions. 
This is useful for scenarios like maintaining a counter's state.

Example: Closure to Maintain a Counter's State
Here's an example of how closures can be used to create a private counter:
  function createCounter() {
      let count = 0; // `count` is a private variable
  
      return function() {
          count += 1;  // Increment the counter
          return count;
      };
  }
  
  const counter = createCounter();
  
  console.log(counter()); // Output: 1
  console.log(counter()); // Output: 2
  console.log(counter()); // Output: 3
*/
--------------------------------------------------------------------------------------------------------------------------------

