/*
Def: Which we may initialize, another promise inside our .then() method,
& accordingly we may execute our result.
we can pass the data, each chain level to other chain level.
*/
Ex:
const cart = ["Sheo", "Pant", "kurtha"];

createOrder(cart)
    .then(function(orderId){ 
        console.log(orderId)  
        return orderId
    })                         //once we get the orderId from the promises[createOrder(cart)], we will pass-it(attached) to the next chain.    
    .then(function (orderId){
        return proceedToPayment(orderId);
    })                         //once we get the paymentInfo from the promises[proceedToPayment(orderId)], just send the data to callback function wt attached it.    
    .then(function(paymentInfo){
        console.log(paymentInfo);
    })
    .catch(function (err){   //if the promise object are failed, it attached to the .catch() function.
        console.log(err.message);
    });

function createOrder(cart){
    const pr = new Promise(function (resolve, reject){
        
       if(!validateCart(cart)){  //if the sending cart, is not vallid, get rejected.
        const err = new Error("Cart is not valid");
        reject(err);   
        }
        //if th logic of createOrder, is sucessflul. Then we will get some OrderId.
        const orderId = "1234";
        if(orderId){
            setTimeout(function(){
                resolve(orderId);
            }, 3000);
        }
    });
    return pr;
};

function proceedToPayment(orderId){
    return new Promise(function (resolve, reject){
        resolve("Payment Successful");
    });
}

function validateCart(cart){
    return true;
    // return false;
}

/*
O/P:
1234
Payment Successful
*/
//-------------------------------------------------------------------------------------------
Ex:
const cart = ["Sheo", "Pant", "kurtha"];

/**
create a order,
then with the orderId, you would proceedToPayent,
then withe the paymentInfo, you would showOrderSummary,
once the order summary is shown, we have to update the walletBalance
 */
createOrder(cart)
    .then(function(orderId){ 
        console.log(orderId)  
        return orderId
    })                             
    .then(function (orderId){
        return proceedToPayment(orderId)
        .then(function(paymentInfo){
            console.log(paymentInfo);
        })
    })
    .then(function(paymentInfo){
        return showOrderSummary(paymentInfo)
        .then(function(walletBalance){
            console.log(walletBalance)
        })
    })                        
  
    .catch(function (err){   
        console.log(err.message);
    });


function createOrder(cart){
    const pr = new Promise(function (resolve, reject){

       if(!validateCart(cart)){  //if the sending cart, is not vallid, get rejected.
        const err = new Error("Cart is not valid");
        reject(err);   
        }
        //if th logic of createOrder, is sucessflul. Then we will get some OrderId.
        const orderId = "1234";
        if(orderId){
            setTimeout(function(){
                resolve(orderId);
            }, 3000);
        }
    });
    return pr;
};

function proceedToPayment(orderId){
    return new Promise(function (resolve, reject){
        resolve("Payment Successful");
    });
}

function showOrderSummary(){
    return new Promise(function(resolve, reject){
        resolve("walllet balance successed")
    })
}

function validateCart(cart){
    return true;
    // return false;
}
/**
    O/P:-
    1234
    Payment Successful
    walllet balance successed
*/
