A)Scope:- is a certain region of program, where define variable exist, and can be recognize. 
        / be on that it can not be recognize.
        Scope is directley dependent on Lexiacl Environment.
        Multiple scope:- Global scope, Block scope(let, const) introduction in ES6, Functional scope(var)

        var a;
        var a; //(we can redecler, has many times, as you want.)
        
        let a;
        let a; //(we can not redeclear, a variable, by using let.)
        
        const a;
        const a; //(we can not redeclear, a variable, by using let.)
        
        var can be redeclear in the same scope. but
        let and const we can not redeclear in the same scope.

 1)Global scope:-
        We can access anywhere in our js code.
        Variable declared outside a function, becomes GLOBAL scpoe.
        Variables declared with var, let and const are quite similar when declared outside a block.
        Ex:-1
        let carName = "Volvo";
        myFunction();
        
        function myFunction() {
          document.getElementById("demo").innerHTML = "I can display " + carName;
        }

        Ex:-2
        var a = 10;
        console.log(a);
        
        Ex:-3
        var x = 2;       // Global scope
        let x = 2;       // Global scope
        const x = 2;       // Global scope

        Ex:- function san(){
                console.log(a);
             }
             var a = 10;
             san();        //10

        Ex:-function san(){
               mas();
               function mas(){
                     console.log(a);
                }
            }
            const a = 10;
            san();        //10
        

2)Function variable:-
        Variables defined inside a function, are not accessible (visible) from outside the function.
        Variables declared with var, let and const are quite similar when declared inside a function.
        They all have Function Scope:-
Ex:-1
 function myFunction() {
  var carName = "Volvo";   // Function Scope
 }
 function myFunction() {
  let carName = "Volvo";   // Function Scope
 }
 function myFunction() {
  const carName = "Volvo";   // Function Scope
 }

Ex:-2:- Variables defined inside a function, are not accessible (visible) from outside the function.
function san(){
    const a = 10;
}
console.log(a);
san();            //Not define

Ex:-3
function san(){
    const a = 10;
    mas();
    function mas(){
        console.log(a);
    }
}
san();   //10

3)Block scope:-
        Before ES6 (2015), JavaScript variables had only Global Scope and Function Scope.
        ES6 introduced two important new JavaScript keywords: let and const.
        These two keywords provide Block Scope in JavaScript.
        Variables declared inside a { } block cannot be accessed from outside the block:
  Ex:-1
  {
      let a =10;
      console.log(a);
  }
  -------OR---------
  {
      const a =10;
      console.log(a);
  }

  Local scope:- 
        Variables declared within a JavaScript function, are LOCAL to the function.
        Ex:-
        function myFunction() {
          let carName = "Volvo";
          // code here CAN use carName
        }
        // code here can NOT use carName
        
        Local variables have Function Scope:
        They can only be accessed from within the function.

4)Shadow Variable:-Ex:- In a fun, we can declear variable name-> let a,
                        same as, we can declear in Block scope variable name-> let a,
                        it will execute the statement.
  function test(){
      let a = "hi";
      if(true){
          let a = "Hello";
          console.log(a);
      }
      console.log(a);
  }
  test(); //Hello hi

-----------------Leggal shadow(var after let)---------------------
  In a fun, we should declear Global variable name-> var a, & same as
  in a block, we can declear block variable name-> let a,
  is known as----.
  Ex:-
  function test(){
      var a = "hi"; 
      if(true){
          let a = "Hello";
          console.log(a);
      }
      console.log(a);   
  }
  test(); // Hello hi

---------------Illeggal shadow(let after var)---------------------
  it will reverse order the leggal shadow.
  Ex:-
  function test(){
      let a = "hi";
      if(true){
          var a = "Hello";
          console.log(a);
      }
      console.log(a);
  }
  test();

ii)Decleration without initialization:-
   In var and let variable, we can Decleration without initialization.
   it will be fine.
   Ex:-
        1)var a;
        2)let a;

   But, in const variable, without initialization, it will not be execute.
   Ex:-
      1)const a;      //Wrong
      2)const a = 10; //right

iii)Re-Initialization
       a) If reinitialize the var & let variable, it will be executed.
        Ex:-var a = 10;
            a = 11;
        
        Ex:-let a = 10;
            a = 11;
         
       b) If reinitialize the const variable, it won't be executed.
        Ex:-const a = 10;
            a = 10; //Uncaught error

B) Hosting:-first we should understand the "Execution context".
        Ex:-
        var a = 10;
        console.log(a);
        O/P:-10
        
        Ex:-
        console.log(a);
        var a = 10;
        O/P:-undefine
        
        Ex:-let a = 10;
        console.log(a);
        O/P:-10
        
        Ex:-console.log(a);
        let a = 10;
        O/P:-Erroe:- cannot access a, before initializing
        
        Ex:-const a = 10;
        console.log(a);
        O/P:-10
        
        Ex:-console.log(a);
        const a = 10;
        O/P:-Erroe:- cannot access a, before initializing

C):- Lexical Environment:- (Note:-Remember Call Stack.)
     Wherever Execution Context is created, along with the Lexical Environment also created.
     Lexival Environment is Local memory, plus refernce to the Lexical environment of it's parent.
     Lexical term is a, Hirarchy or in a Sequence.
     Ex:- c() fun, is lexicaly sit in a() fun. OR/ c() is lexiacly inside an a().
          Then a() is lexicaly inside an Global scope.
          When i say, lexical environment is local memory, along with lexical environment is parent.
        function a(){
           var a = 10;
           c();
           function c(){
                console.log(a);
           }
        }
        a();   //10

     Scope Chain:- Lexical environment of it's parent, refernce to another lexical environment parent.
     
        
