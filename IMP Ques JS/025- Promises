Promises:-are used to handle, Async operation in JS.
In JavaScript, a Promise is an object, that will produce a single value some time in the future. 
If the promise is successful, it will produce a resolved value, 
but if the promise is unsuccessflu/something goes wrong, then it will produce a reason why the promise failed.

fetch():- this fetch functions, returns the promises.
          it is an api, given by browser(To make external calls).
          we will try to fetch some user info, from api.
          Ex:-
          const GITHUB_API = "https://api.github.com/users/sandeepls"
          const user = fetch(GITHUB_API);   //here we will get promises object inside the user.(in sourse)

          console.log(user);   //we get promises object inside the user.(in console)

          user.then(function(data){
              console.log(data);    //we get promises object, Respons data.
          })

there are 3 states in promises:- Pending, Fullfilled, Rejected.
//------------------------------------------------------------------------------------------------
Ex:we take E-Commerce website, lets we take cart.

const cart = ["sheo", "pant", "kurtha"];
/*along with the cart, we have some api.(api.createOrder()),
 This api takes the cart item, return the order detalis/ID(create a order).
 //api.createOrder(cart);
 And we have another api, api.proceedPayment(),this api will take order details/ID,
 and it will proceed the payment/payment page.
 //api.proceedOrder(orderId);

 These 2 api are async, we don't no how much time it will take.
 Now, let us see, how we use that in callback function(Its just rap the api, inside the callback function).
 then pass the callback function, inside the createOrder() api, 
 
 Now, the responsible of createOrder() api, create an order firt,and then call the callback function back,
 once the order is created, with the orderId function (orderId).
*/

api.createOrder(cart, function (orderId){
    api.proceedOrder(orderId);            //passing a function 
}); 
//this is how used to handle, Async operation with callback.
/*Inversion of controll:we pass the callback function, to createOrder() api.
    At some point of time, these createOrder() call or callback function and everything will be peacefull.
    But what if these createOrder() api never call/callback function OR it might call twise.
*/

//---------------------------------------------------------------------------------------

const promises = createOrder(cart); 
//createOrder(cart) api,  returns the promises(enpty object {}, with some data value init{data:undefine}).
//After running createOrder() api, it will store some value in promises(in empty object{data:"orderId"}).

/*Once we get the orderId, we proceed to Payment. Now we attach the callback function to promises object.
    using promises.then (It is promises object).
*/
promises.then(function (orderId){
    api.proceedOrder(orderId);     //Attaching a function
}); 
