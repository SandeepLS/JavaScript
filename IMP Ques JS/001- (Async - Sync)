1. Synchronous Execution
   In synchronous execution, tasks are performed one after the other, in sequence.
   A task must complete, before the next one starts.
-> Blocking methods execute synchronously like: variable, function, for, if else, while console.log(), DOM api.

  Ex:-
    console.log("Start");
    
    // Simulating a time-consuming task
    function delayTask() {
      for (let i = 0; i < 1e9; i++) {} // Simulates delay
      console.log("Task completed");
    }
    delayTask();
    console.log("End");

    O/P:
    Start
    Task completed  //Here, the program waits for delayTask() to finish before moving to the next task.
    End

2. Asynchronous Execution
  In asynchronous execution, tasks can be initiated and allowed to run in the background. 
  The program does not wait for a task to complete, before starting the next one. Instead, 
  it continues executing the rest of the code, while the task is handled in the background.
-> Non-Blocking methods execute Asynchronously like web API: fetch, promises, setTimeout, setInterval, FS.
  Ex:
    console.log("Start");
    
    // Simulating an asynchronous task
    setTimeout(() => {
      console.log("Task completed");
    }, 2000);
    
    console.log("End");
    
    O/P:-
    Start
    End
    Task completed
--------------------------------------------------------------------------------
The differences between asynchronous and synchronous include:

a) Async is multi-thread, which means operations or programs can run in parallel.
   Sync is a single-thread, so only one operation or program will run at a time.

b) Async is non-blocking, which means it will send multiple requests to a server.
   Sync is blocking â€” it will only send the server one request at a time and wait for that request to be answered by the server.

c) Async increases throughput because multiple operations can run at the same time.
   Sync is slower and more methodica
d)Synchronous happens to, execute code in sequential manner.(that line after the other).
  Ex:- var a = 1;
       var b = 2;
       console.log(a);
       console.log(b); 

  Asynchronous happens to, execute code in non sequential manner and unexpected execution time of code.
   genral ex:- it's take call back function, An print out in console loded the page.
       fetch("/", function(){
         console.log("loadded the page");
       })
  Ex:- it's a callback function(setimeout), it's take a callback function to be executed.
      in that case we console log in the helloworld.
      And second argument is the, How many mili second we want to wait,
      it will have the dely of 1 sec, and the it simple printed on helloworld.
        var a = 1;
        setTimeout(function(){
           console.log("Hello World");
        },1000)
        console.log(a);
      O/P:-
      1
      Hello world
      (:-In Synchronous should print first Hello world, after 1,
         In Asynchronous print 1 after Hello World )

