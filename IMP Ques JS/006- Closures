Closures:- is a combination/multiple of function, bundle together with-
           Lexical environment(Reference to its surrounding state.).
           Very powerful in JavaScript, especially for maintaining state or creating private variables.
          Ex:-
          function name(){
              var name = "Sandeep";  //name is a local variable, in the `name` function
              function displayName(){  //displayName() is the inner function, that forms the closure
                  console.log(name);  //Accessing `name` from the Outer function/Parent function
              }
              displayName();
          }
          name();  //Sandeep  

          Ex:-2
           function x() {
             var name = "san"; // `name` is in the lexical environment of `x`
             function y() {
               console.log(name); // `y` forms a closure and remembers `name`
             }
             return y; // Returning the inner function
           }
           var z = x(); // `z` now holds the function `y` along with its closure
           console.log(z); // Output: [Function: y]
           z(); // Output: san

Explanation:
> When x is invoked, it returns the inner function y.
> z holds the reference to y along with its closure, meaning y still has access to the name variable from x.
> Calling z() logs "san".


Uses of clousers:-
  -Module design pattern
  -Maintain state
  -Create Private Variables
  -Callback
  -Currying
  -Functions like once
  -Memoize
  -maintaining state in async world
  -setTimeouts
  -Iterators
  -& many more.

-----------------------------------------------------------------------------------------------
setTimeout closuer:-
Ex:-
function x(){
    var i = 1;
    setTimeout(function(){
        console.log(i);
    }, 3000);
    console.log("Mashi");
}
x(); //mashi 1

Ex:-all of thes setTimeout function refering to the i, same memory space.
    Javascript is doesnot wait for anything, i will run loop again & again, it store that functions.
    it doesnot to wait for time-expire. Now the var i is 6.
    When this callback functions run, the var i 6.
    that is y it's print 6 6 6 6 6.
    var:- variable values stored same memory location.
function x(){
    for(var i =1;i<=5;i++){
        setTimeout(function(){
            console.log(i);
        }, i * 1000);
    }
    console.log("Mashi");
}
x(); //6 6 6 6 6 

Ex:- every let variable value stored another memory, so it will print order wise.
function x(){
    for(let i =1;i<=5;i++){
        setTimeout(function(){
            console.log(i);
        }, i * 1000);
    }
    console.log("Mashi");
}
x(); //1 2 3 4 5 //it will print after every one sec.

Ex:-using var: we want to kind of have, new copy of i each and every time, the loop is executed.
function x(){
    for(var i =1;i<=5;i++){
        function closure(x){
            setTimeout(function(){
                console.log(x);
            }, x * 1000);
        }
        closure(i)
    }
    console.log("Mashi");
}
x();//Mashi 1 2 3 4 5 //it will print after every one sec.
