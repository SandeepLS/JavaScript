const cart = ["Sheo", "Pant", "Kurtha"];

/**
create an order,
then with the orderId, you would proceedToPayent,
then with the paymentInfo, you would showOrderSummary,
once the order summary is shown, we have to update the walletBalance
 */
//consuming , and more redable
createOrder(cart)
    .then(orderId => { 
        console.log("Order ID:", orderId);  
        return proceedToPayment(orderId);
    })                             
    .then(paymentInfo => {
        console.log("Payment Info:", paymentInfo);
        return showOrderSummary(paymentInfo);
    })
    .then(walletBalance => {
        console.log("Wallet Balance:", walletBalance);
    })                        
    .catch(err => {   
        console.error("Error:", err.message);
    });

function createOrder(cart) {
    return new Promise((resolve, reject) => {
        if (!validateCart(cart)) {  // If the cart is not valid, reject the promise.
            return reject(new Error("Cart is not valid"));
        }

        // Simulate order creation
        const orderId = "1234";
        setTimeout(() => {
            resolve(orderId);
        }, 3000);
    });
}

function proceedToPayment(orderId) {
    return new Promise((resolve) => {
        // Simulate payment processing
        resolve("Payment Successful");
    });
}

function showOrderSummary(paymentInfo) {
    return new Promise((resolve) => {
        // Simulate showing order summary
        resolve("Wallet Balance Updated");
    });
}

function validateCart(cart) {
    // Simulate cart validation
    return true;
}
