Ex:- A function along with, refernce to outer environment, like together form of closure.
     Closure is a combination of function, bundel together with Lexical environment.

     Each and every function in JS, has access it outer lexical environment.
     Even when the function, executed in other scope, not a original scope,
     It's still remembers the, outer lexical environment, were it was originaly present in the code.so...

     Suppose if we have function we call it as outter(), then nested function, we call it has inner(),
     In JS inner() has access to outer environment. If i create variable in outer environment
     Ex:-
          function outter(){
              var a = 10;
             function inner(){    //it will form a clouser
                  console.log(a);
              }
              return inner();
          }
          outter();  //10
     Ex:-
        function outter(){
            var a = 10;
           return function inner(){
                console.log(a);
            }
        }
        outter()(); //It's calling a inner function. //10
        OR
        const close = outter();
        close();
        close();


     Ex:-b is also part of outter environment, of inner function.
          function outer(b){
              var a = 10;
              return function inner(){
                  console.log(a, b);
              }
          }
          outer("Hello")(); //10 Hello

     Ex:-inner function still forms of closue, a outter environment a.
          function outest(){
              var c = 20;
              function outer(b){
                  var a = 10;
                  function inner(){
                      console.log(a, b, c);
                  }
                  return inner;
              }
              return outer;
          }
          const res = outest()("hello");
          res();

Closure Advantage:- we will use in-
-Module pattern
-Curry function
-Higher order function
-Data hiding encapsulation

Data Hiding:-Suppose if we have a variable, we want to make data privacy here,
             other function or pices(module), can not access to that particular data.

Ex:-suppose we have count, we have to increment using incrementCounter().
     wt we does it, just increment the counter++;
     var count = 0;
     function incrementCounter(){
          count++;
     }     //tis can be access anyone.

     So we can rapit another function.Means we can achive it closure.
     function counter(){
         var count = 0;
         function incrementCounter(){     //count is hidden
             count++;
         }  
     }
     console.log(count);

     This is how handle the data hidden.
     function counter(){
         var count = 0;
         return function incrementCounter(){     //1
             count++;
             console.log(count)
         }  
     }
     var counter1 = counter();
     counter1();

     if we call again, it will achive 1 more.
     counter1();     //1 2

     if we create another counter2,
     var counter2 = counter();     //this will be a fresh counter itself. then it wont touch counter1().
     counter2();                    When ever function is run it will create new inded copy.
          

Note:- the above code is not scallable for increment & decrement counting,
       In that case we use constructor.
Ex:-Constructor example.
function Counter(){
    var count=0;
    this.incrementCounter = function(){
        count++;
        console.log(count);
    }
    this.decrementCounter = function(){
        count--;
        console.log(count);
    }
}
const result = new Counter(); //for contructor we spesify new operator
result.incrementCounter();
result.incrementCounter();
result.decrementCounter();

Garbage collector:- is automatically identifies And eliminates junk data.




          

     
