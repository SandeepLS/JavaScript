https://www.youtube.com/watch?v=wstwjQ1yqWQ

Prototype:-
Whenever we create JS array OR object, JS Engine automatically without even leting you know,
attached our arrays OR object, with some hidden properties, methods and Functions, And 
these are the hidden properties and functions, which we can acces, just by doing Object. / arr. we can get lot of think.

Ex:-Array
let arr = ["Sandeep", "Sidhu"]; //array created.
(*Have you ever wonder,
In console, we just type arr.
Then we get, access to all this properties, methods & Built-in-function. (Not just array in Objects also))

Ex:-Object
let object = {
  name: "Sandeep",
  city: "LKV",
  getIntro: function(){
    console.log(this.name +"from"+ this.city);
  }
}
(*In console, we just type object.name OR object.city
Then we get, access to all this properties, methods.

Its not just with the case of Object, If we create a function also
function(){
  //which does nothing, if we check it, even functions get lot of thinks. 
    (its some of hidden properties, methods and Functions), So these comes via prototype.
}

In console:-
if we want to access hidden object, we can do it by array, arr.__proto__. (this is the prototype object, were JS engine putting all these function and methods).
Not even array, we can do it for object, object__proto__. then we get access to this object aswell(which is the prototype object, it also have some properties & methods)

arr.__proto__ (It has one object) = Array.prototype (It has one object) => both are same value.
  Whenever i say __proto__ is an object & each an every object in JS has a prototype.
  Even this arr.__proto__ has its own prototype, => arr.__proto__.__proto__  we get one Object, so this is actually Object.prototype
arr.__proto__.__proto__ => Object.prototype => object.__proto__ =>> all are same valur/object.

arr.__proto__
Array.prototype
arr.__proto__.__proto__
Object.prototype 
arr.__proto__.__proto__.__proto__ =>null
Explain:-
arr.__proto__ : is the => Array.prototype
arr.__proto__.__proto__: and the prototype(arr.__proto__) of Array.prototype is the object prototype(.__proto__) => Object.prototype
arr.__proto__.__proto__.proto__ :Object prototype is actually null 
so that is called prototype chain.

conclusion:-Whenever we creat an arr, it as its prototype, which is Array.prototype
And the Array.prototype object also has prototype, which is Object.prototype
And Object.prototype prototype is actually null.

Ex:-chain prototype
  let object = {
      name: "sandeep",
      city: "LKV",
      getItro: function(){
          console.log(this.name +"from"+ this.city);
      }
  }
  
  let object2 = {
      name: "Ashika"
  }
  object2.__proto__= object;
  O/P:-object2.__proto__
       object values
  O/P:-object2.name
       'Ashika'
  O/P:-object2.city
       'LKV'

-------------------------------------------------------------------------------------------------------------
Prototype:-
  *JavaScript is prototype-based because it uses prototypes to define the structure and behavior of objects.
  *JavaScript was designed to be highly dynamic and flexible.
   Prototypes allow objects to inherit properties and methods from other objects, 
   facilitating a more flexible and dynamic approach to object-oriented programming.

Example: Creating a Prototype Chain
Let's create two objects, animal and dog, where dog inherits properties and methods from animal.

Step 1: Define the animal object with a method
// Create an animal object
const animal = {
    type: "Animal",
    sound: "Generic sound",
    makeSound: function() {
        console.log(this.sound);
    }
};

Step 2: Create the dog object that inherits from animal
// Create a dog object that inherits from animal
const dog = Object.create(animal);
dog.type = "Dog";
dog.sound = "Bark";

Step 3: Use the inherited method
// Call the makeSound method on dog
dog.makeSound(); // Output: Bark


Adding a New Method to the Prototype
Let's add a new method to the animal object and see how it affects the dog object.

Step 4: Add a new method to the animal prototype
// Add a new method to the animal object
animal.describe = function() {
    console.log(`This is a ${this.type} and it makes a ${this.sound} sound.`);
};
// Call the new method on dog
dog.describe(); // Output: This is a Dog and it makes a Bark sound.
