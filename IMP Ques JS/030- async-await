//async:
  async is a keyword, that is used befor the function, to create async function.
  async function: always return a promise. there are tow cases,
    either we can return promises / value(string, num, bool).
    This function will take value, rapid insaid the promise & return the value.
    Ex:
    async function getdata() {
        return "Sandeep";   //we return value.
    }
    const dataPromise = getdata();
    console.log(dataPromise);   //here we will get promise data.
    dataPromise.then(res => console.log(res));  //here we will get actual data, what we return in the function.
  
    Example 1: Returning a value
      async function returnValue() {
        return 42; // This is a number
      }
      
      returnValue().then((result) => {
        console.log(result); // Output: 42
      });
    
    Example 2: Returning a promise
      async function returnPromise() {
        return new Promise((resolve) => {
          setTimeout(() => {
            resolve('Hello, world!');
          }, 1000);
        });
      }
      returnPromise().then((result) => {
        console.log(result); // Output: Hello, world! (after 1 second)
      });
    
    Example3: resolve & reject
    async function returnPromise(shouldResolve){
        return new Promise((resolve, reject) =>{
            setTimeout(()=>{
                if(shouldResolve){
                    resolve("Hello Sandeep")  //if true
                } else{
                    reject("Somthing went wrong")  //if false
                }
            }, 2000)
        })
    }
    
    returnPromise(false).then((result) =>{   //true or false
        console.log(result);
    }).catch((error)=>{
        console.log(error)
    })

--------------------------------------------------------------------------------------------------
//await:- await operator/keyword is used to, wait for a Promises.
  It can only be used, inside an async function with reguler Javascript code.
  How do we use async along with await:- 
  async and await combo, is used to handle promises.

  Ex: Using async/await:-
  function fetchData(shouldResolve){
      return new Promise((resolve, reject) =>{
          setTimeout(()=>{
              if(shouldResolve){
                  resolve("Data fetched successfully")
              } else{
                  reject("Error fetching data!")
              }
          }, 2000)
      })
  }
  
  async function getData(shouldResolve){
      try{
          const result = await fetchData(shouldResolve);
          console.log(result);
      }catch(error){
          console.error(error);
      }
  }
  getData(true)  //Data fetched successfully
  getData(false)  //Error fetching data!

-------------------------------------------------------------------------------------------------
//example of promise without using async/await.
  function fetchData(shouldResolve){
      return new Promise((resolve, reject) =>{
          setTimeout(()=>{
              if(shouldResolve){
                  resolve("Data fetched successfully")
              } else{
                  reject("Error fetching data!")
              }
          }, 2000)
      })
  }
  
  fetchData(true).then((result) =>{   //true or false
      console.log(result);
  }).catch((error) =>{
      console.error(error);
  })
